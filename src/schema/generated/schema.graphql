### This file was generated by Nexus Schema
### Do not make changes to this file directly


scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

enum DayOfWeek {
  FRI
  MON
  SAT
  SUN
  THU
  TUE
  WED
}

enum DayType {
  OFF
  WORK
}

input EnumDayOfWeekNullableListFilter {
  equals: [DayOfWeek!]
  has: DayOfWeek
  hasEvery: [DayOfWeek!]
  hasSome: [DayOfWeek!]
  isEmpty: Boolean
}

input EnumDayTypeFieldUpdateOperationsInput {
  set: DayType
}

input EnumDayTypeFilter {
  equals: DayType
  in: [DayType!]
  not: NestedEnumDayTypeFilter
  notIn: [DayType!]
}

input EnumRoleFieldUpdateOperationsInput {
  set: Role
}

input EnumRoleFilter {
  equals: Role
  in: [Role!]
  not: NestedEnumRoleFilter
  notIn: [Role!]
}

input EnumStatusFieldUpdateOperationsInput {
  set: Status
}

input EnumStatusFilter {
  equals: Status
  in: [Status!]
  not: NestedEnumStatusFilter
  notIn: [Status!]
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

type IrregularDate {
  createdAt: DateTime!
  date: DateTime!
  id: Int!
  type: DayType!
  updatedAt: DateTime!
  user: User!
  userId: Int!
}

input IrregularDateCreateManyUserInput {
  createdAt: DateTime
  date: DateTime!
  id: Int
  type: DayType
  updatedAt: DateTime
}

input IrregularDateCreateManyUserInputEnvelope {
  data: [IrregularDateCreateManyUserInput!]
  skipDuplicates: Boolean
}

input IrregularDateCreateNestedManyWithoutUserInput {
  connect: [IrregularDateWhereUniqueInput!]
  connectOrCreate: [IrregularDateCreateOrConnectWithoutUserInput!]
  create: [IrregularDateCreateWithoutUserInput!]
  createMany: IrregularDateCreateManyUserInputEnvelope
}

input IrregularDateCreateOrConnectWithoutUserInput {
  create: IrregularDateCreateWithoutUserInput!
  where: IrregularDateWhereUniqueInput!
}

input IrregularDateCreateWithoutUserInput {
  createdAt: DateTime
  date: DateTime!
  type: DayType
  updatedAt: DateTime
}

input IrregularDateListRelationFilter {
  every: IrregularDateWhereInput
  none: IrregularDateWhereInput
  some: IrregularDateWhereInput
}

input IrregularDateScalarWhereInput {
  AND: [IrregularDateScalarWhereInput!]
  NOT: [IrregularDateScalarWhereInput!]
  OR: [IrregularDateScalarWhereInput!]
  createdAt: DateTimeFilter
  date: DateTimeFilter
  id: IntFilter
  type: EnumDayTypeFilter
  updatedAt: DateTimeFilter
  userId: IntFilter
}

input IrregularDateUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  date: DateTimeFieldUpdateOperationsInput
  type: EnumDayTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input IrregularDateUpdateManyWithWhereWithoutUserInput {
  data: IrregularDateUpdateManyMutationInput!
  where: IrregularDateScalarWhereInput!
}

input IrregularDateUpdateManyWithoutUserInput {
  connect: [IrregularDateWhereUniqueInput!]
  connectOrCreate: [IrregularDateCreateOrConnectWithoutUserInput!]
  create: [IrregularDateCreateWithoutUserInput!]
  createMany: IrregularDateCreateManyUserInputEnvelope
  delete: [IrregularDateWhereUniqueInput!]
  deleteMany: [IrregularDateScalarWhereInput!]
  disconnect: [IrregularDateWhereUniqueInput!]
  set: [IrregularDateWhereUniqueInput!]
  update: [IrregularDateUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [IrregularDateUpdateManyWithWhereWithoutUserInput!]
  upsert: [IrregularDateUpsertWithWhereUniqueWithoutUserInput!]
}

input IrregularDateUpdateWithWhereUniqueWithoutUserInput {
  data: IrregularDateUpdateWithoutUserInput!
  where: IrregularDateWhereUniqueInput!
}

input IrregularDateUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  date: DateTimeFieldUpdateOperationsInput
  type: EnumDayTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input IrregularDateUpsertWithWhereUniqueWithoutUserInput {
  create: IrregularDateCreateWithoutUserInput!
  update: IrregularDateUpdateWithoutUserInput!
  where: IrregularDateWhereUniqueInput!
}

input IrregularDateWhereInput {
  AND: [IrregularDateWhereInput!]
  NOT: [IrregularDateWhereInput!]
  OR: [IrregularDateWhereInput!]
  createdAt: DateTimeFilter
  date: DateTimeFilter
  id: IntFilter
  type: EnumDayTypeFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: IntFilter
}

input IrregularDateWhereUniqueInput {
  id: Int
}

type Mutation {
  createOneProject(data: ProjectCreateInput!): Project!
  createOneTask(data: TaskCreateInput!): Task!
  createOneUser(data: UserCreateInput!): User!
  deleteOneProject(where: ProjectWhereUniqueInput!): Project
  deleteOneTask(where: TaskWhereUniqueInput!): Task
  deleteOneUser(where: UserWhereUniqueInput!): User
  updateOneProject(data: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project
  updateOneTask(data: TaskUpdateInput!, where: TaskWhereUniqueInput!): Task
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedEnumDayTypeFilter {
  equals: DayType
  in: [DayType!]
  not: NestedEnumDayTypeFilter
  notIn: [DayType!]
}

input NestedEnumRoleFilter {
  equals: Role
  in: [Role!]
  not: NestedEnumRoleFilter
  notIn: [Role!]
}

input NestedEnumStatusFilter {
  equals: Status
  in: [Status!]
  not: NestedEnumStatusFilter
  notIn: [Status!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

type Project {
  createdAt: DateTime!
  endAt: DateTime!
  id: Int!
  name: String!
  startAt: DateTime!
  tasks(after: TaskWhereUniqueInput, before: TaskWhereUniqueInput, first: Int, last: Int, orderBy: [ProjectTasksOrderByInput!]): [Task!]!
  updatedAt: DateTime!
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int, orderBy: [ProjectUsersOrderByInput!]): [User!]!
}

input ProjectCreateInput {
  createdAt: DateTime
  endAt: DateTime!
  name: String!
  startAt: DateTime!
  tasks: TaskCreateNestedManyWithoutProjectInput
  updatedAt: DateTime
  users: UserCreateNestedManyWithoutProjectsInput
}

input ProjectCreateNestedManyWithoutUsersInput {
  connect: [ProjectWhereUniqueInput!]
  connectOrCreate: [ProjectCreateOrConnectWithoutUsersInput!]
  create: [ProjectCreateWithoutUsersInput!]
}

input ProjectCreateNestedOneWithoutTasksInput {
  connect: ProjectWhereUniqueInput
  connectOrCreate: ProjectCreateOrConnectWithoutTasksInput
  create: ProjectCreateWithoutTasksInput
}

input ProjectCreateOrConnectWithoutTasksInput {
  create: ProjectCreateWithoutTasksInput!
  where: ProjectWhereUniqueInput!
}

input ProjectCreateOrConnectWithoutUsersInput {
  create: ProjectCreateWithoutUsersInput!
  where: ProjectWhereUniqueInput!
}

input ProjectCreateWithoutTasksInput {
  createdAt: DateTime
  endAt: DateTime!
  name: String!
  startAt: DateTime!
  updatedAt: DateTime
  users: UserCreateNestedManyWithoutProjectsInput
}

input ProjectCreateWithoutUsersInput {
  createdAt: DateTime
  endAt: DateTime!
  name: String!
  startAt: DateTime!
  tasks: TaskCreateNestedManyWithoutProjectInput
  updatedAt: DateTime
}

input ProjectListRelationFilter {
  every: ProjectWhereInput
  none: ProjectWhereInput
  some: ProjectWhereInput
}

input ProjectOrderByInput {
  createdAt: SortOrder
  endAt: SortOrder
  id: SortOrder
  name: SortOrder
  startAt: SortOrder
  updatedAt: SortOrder
}

input ProjectScalarWhereInput {
  AND: [ProjectScalarWhereInput!]
  NOT: [ProjectScalarWhereInput!]
  OR: [ProjectScalarWhereInput!]
  createdAt: DateTimeFilter
  endAt: DateTimeFilter
  id: IntFilter
  name: StringFilter
  startAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input ProjectTasksOrderByInput {
  id: SortOrder
}

input ProjectUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  endAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  startAt: DateTimeFieldUpdateOperationsInput
  tasks: TaskUpdateManyWithoutProjectInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  users: UserUpdateManyWithoutProjectsInput
}

input ProjectUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  endAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  startAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProjectUpdateManyWithWhereWithoutUsersInput {
  data: ProjectUpdateManyMutationInput!
  where: ProjectScalarWhereInput!
}

input ProjectUpdateManyWithoutUsersInput {
  connect: [ProjectWhereUniqueInput!]
  connectOrCreate: [ProjectCreateOrConnectWithoutUsersInput!]
  create: [ProjectCreateWithoutUsersInput!]
  delete: [ProjectWhereUniqueInput!]
  deleteMany: [ProjectScalarWhereInput!]
  disconnect: [ProjectWhereUniqueInput!]
  set: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithWhereUniqueWithoutUsersInput!]
  updateMany: [ProjectUpdateManyWithWhereWithoutUsersInput!]
  upsert: [ProjectUpsertWithWhereUniqueWithoutUsersInput!]
}

input ProjectUpdateOneRequiredWithoutTasksInput {
  connect: ProjectWhereUniqueInput
  connectOrCreate: ProjectCreateOrConnectWithoutTasksInput
  create: ProjectCreateWithoutTasksInput
  update: ProjectUpdateWithoutTasksInput
  upsert: ProjectUpsertWithoutTasksInput
}

input ProjectUpdateWithWhereUniqueWithoutUsersInput {
  data: ProjectUpdateWithoutUsersInput!
  where: ProjectWhereUniqueInput!
}

input ProjectUpdateWithoutTasksInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  endAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  startAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  users: UserUpdateManyWithoutProjectsInput
}

input ProjectUpdateWithoutUsersInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  endAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  startAt: DateTimeFieldUpdateOperationsInput
  tasks: TaskUpdateManyWithoutProjectInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProjectUpsertWithWhereUniqueWithoutUsersInput {
  create: ProjectCreateWithoutUsersInput!
  update: ProjectUpdateWithoutUsersInput!
  where: ProjectWhereUniqueInput!
}

input ProjectUpsertWithoutTasksInput {
  create: ProjectCreateWithoutTasksInput!
  update: ProjectUpdateWithoutTasksInput!
}

input ProjectUsersOrderByInput {
  id: SortOrder
}

input ProjectWhereInput {
  AND: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  createdAt: DateTimeFilter
  endAt: DateTimeFilter
  id: IntFilter
  name: StringFilter
  startAt: DateTimeFilter
  tasks: TaskListRelationFilter
  updatedAt: DateTimeFilter
  users: UserListRelationFilter
}

input ProjectWhereUniqueInput {
  id: Int
}

type Query {
  project(where: ProjectWhereUniqueInput!): Project
  projects(after: ProjectWhereUniqueInput, before: ProjectWhereUniqueInput, first: Int, last: Int, orderBy: [ProjectOrderByInput!], where: ProjectWhereInput): [Project!]!
  task(where: TaskWhereUniqueInput!): Task
  tasks(after: TaskWhereUniqueInput, before: TaskWhereUniqueInput, first: Int, last: Int, orderBy: [TaskOrderByInput!], where: TaskWhereInput): [Task!]!
  user(where: UserWhereUniqueInput!): User
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int, orderBy: [UserOrderByInput!], where: UserWhereInput): [User!]!
}

enum QueryMode {
  default
  insensitive
}

enum Role {
  MANAGER
  MEMBER
}

enum SortOrder {
  asc
  desc
}

enum Status {
  DONE
  PENDING
  READY
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

type Task {
  actualDuration: Int!
  createdAt: DateTime!
  id: Int!
  name: String!
  plannedDuration: Int!
  project: Project!
  projectId: Int!
  rank: Int!
  status: Status!
  updatedAt: DateTime!
  user: User!
  userId: Int!
}

input TaskCreateInput {
  actualDuration: Int
  createdAt: DateTime
  name: String!
  plannedDuration: Int
  project: ProjectCreateNestedOneWithoutTasksInput!
  rank: Int!
  status: Status
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutTasksInput!
}

input TaskCreateManyProjectInput {
  actualDuration: Int
  createdAt: DateTime
  id: Int
  name: String!
  plannedDuration: Int
  rank: Int!
  status: Status
  updatedAt: DateTime
  userId: Int!
}

input TaskCreateManyProjectInputEnvelope {
  data: [TaskCreateManyProjectInput!]
  skipDuplicates: Boolean
}

input TaskCreateManyUserInput {
  actualDuration: Int
  createdAt: DateTime
  id: Int
  name: String!
  plannedDuration: Int
  projectId: Int!
  rank: Int!
  status: Status
  updatedAt: DateTime
}

input TaskCreateManyUserInputEnvelope {
  data: [TaskCreateManyUserInput!]
  skipDuplicates: Boolean
}

input TaskCreateNestedManyWithoutProjectInput {
  connect: [TaskWhereUniqueInput!]
  connectOrCreate: [TaskCreateOrConnectWithoutProjectInput!]
  create: [TaskCreateWithoutProjectInput!]
  createMany: TaskCreateManyProjectInputEnvelope
}

input TaskCreateNestedManyWithoutUserInput {
  connect: [TaskWhereUniqueInput!]
  connectOrCreate: [TaskCreateOrConnectWithoutUserInput!]
  create: [TaskCreateWithoutUserInput!]
  createMany: TaskCreateManyUserInputEnvelope
}

input TaskCreateOrConnectWithoutProjectInput {
  create: TaskCreateWithoutProjectInput!
  where: TaskWhereUniqueInput!
}

input TaskCreateOrConnectWithoutUserInput {
  create: TaskCreateWithoutUserInput!
  where: TaskWhereUniqueInput!
}

input TaskCreateWithoutProjectInput {
  actualDuration: Int
  createdAt: DateTime
  name: String!
  plannedDuration: Int
  rank: Int!
  status: Status
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutTasksInput!
}

input TaskCreateWithoutUserInput {
  actualDuration: Int
  createdAt: DateTime
  name: String!
  plannedDuration: Int
  project: ProjectCreateNestedOneWithoutTasksInput!
  rank: Int!
  status: Status
  updatedAt: DateTime
}

input TaskListRelationFilter {
  every: TaskWhereInput
  none: TaskWhereInput
  some: TaskWhereInput
}

input TaskOrderByInput {
  actualDuration: SortOrder
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  plannedDuration: SortOrder
  projectId: SortOrder
  rank: SortOrder
  status: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input TaskScalarWhereInput {
  AND: [TaskScalarWhereInput!]
  NOT: [TaskScalarWhereInput!]
  OR: [TaskScalarWhereInput!]
  actualDuration: IntFilter
  createdAt: DateTimeFilter
  id: IntFilter
  name: StringFilter
  plannedDuration: IntFilter
  projectId: IntFilter
  rank: IntFilter
  status: EnumStatusFilter
  updatedAt: DateTimeFilter
  userId: IntFilter
}

input TaskUpdateInput {
  actualDuration: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  plannedDuration: IntFieldUpdateOperationsInput
  project: ProjectUpdateOneRequiredWithoutTasksInput
  rank: IntFieldUpdateOperationsInput
  status: EnumStatusFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutTasksInput
}

input TaskUpdateManyMutationInput {
  actualDuration: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  plannedDuration: IntFieldUpdateOperationsInput
  rank: IntFieldUpdateOperationsInput
  status: EnumStatusFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TaskUpdateManyWithWhereWithoutProjectInput {
  data: TaskUpdateManyMutationInput!
  where: TaskScalarWhereInput!
}

input TaskUpdateManyWithWhereWithoutUserInput {
  data: TaskUpdateManyMutationInput!
  where: TaskScalarWhereInput!
}

input TaskUpdateManyWithoutProjectInput {
  connect: [TaskWhereUniqueInput!]
  connectOrCreate: [TaskCreateOrConnectWithoutProjectInput!]
  create: [TaskCreateWithoutProjectInput!]
  createMany: TaskCreateManyProjectInputEnvelope
  delete: [TaskWhereUniqueInput!]
  deleteMany: [TaskScalarWhereInput!]
  disconnect: [TaskWhereUniqueInput!]
  set: [TaskWhereUniqueInput!]
  update: [TaskUpdateWithWhereUniqueWithoutProjectInput!]
  updateMany: [TaskUpdateManyWithWhereWithoutProjectInput!]
  upsert: [TaskUpsertWithWhereUniqueWithoutProjectInput!]
}

input TaskUpdateManyWithoutUserInput {
  connect: [TaskWhereUniqueInput!]
  connectOrCreate: [TaskCreateOrConnectWithoutUserInput!]
  create: [TaskCreateWithoutUserInput!]
  createMany: TaskCreateManyUserInputEnvelope
  delete: [TaskWhereUniqueInput!]
  deleteMany: [TaskScalarWhereInput!]
  disconnect: [TaskWhereUniqueInput!]
  set: [TaskWhereUniqueInput!]
  update: [TaskUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [TaskUpdateManyWithWhereWithoutUserInput!]
  upsert: [TaskUpsertWithWhereUniqueWithoutUserInput!]
}

input TaskUpdateWithWhereUniqueWithoutProjectInput {
  data: TaskUpdateWithoutProjectInput!
  where: TaskWhereUniqueInput!
}

input TaskUpdateWithWhereUniqueWithoutUserInput {
  data: TaskUpdateWithoutUserInput!
  where: TaskWhereUniqueInput!
}

input TaskUpdateWithoutProjectInput {
  actualDuration: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  plannedDuration: IntFieldUpdateOperationsInput
  rank: IntFieldUpdateOperationsInput
  status: EnumStatusFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutTasksInput
}

input TaskUpdateWithoutUserInput {
  actualDuration: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  plannedDuration: IntFieldUpdateOperationsInput
  project: ProjectUpdateOneRequiredWithoutTasksInput
  rank: IntFieldUpdateOperationsInput
  status: EnumStatusFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TaskUpsertWithWhereUniqueWithoutProjectInput {
  create: TaskCreateWithoutProjectInput!
  update: TaskUpdateWithoutProjectInput!
  where: TaskWhereUniqueInput!
}

input TaskUpsertWithWhereUniqueWithoutUserInput {
  create: TaskCreateWithoutUserInput!
  update: TaskUpdateWithoutUserInput!
  where: TaskWhereUniqueInput!
}

input TaskWhereInput {
  AND: [TaskWhereInput!]
  NOT: [TaskWhereInput!]
  OR: [TaskWhereInput!]
  actualDuration: IntFilter
  createdAt: DateTimeFilter
  id: IntFilter
  name: StringFilter
  plannedDuration: IntFilter
  project: ProjectWhereInput
  projectId: IntFilter
  rank: IntFilter
  status: EnumStatusFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: IntFilter
}

input TaskWhereUniqueInput {
  id: Int
}

type User {
  createdAt: DateTime!
  dayOff: [DayOfWeek!]!
  durationPerDay: Int!
  email: String!
  id: Int!
  name: String!
  projects(after: ProjectWhereUniqueInput, before: ProjectWhereUniqueInput, first: Int, last: Int): [Project!]!
  role: Role!
  tasks(after: TaskWhereUniqueInput, before: TaskWhereUniqueInput, first: Int, last: Int): [Task!]!
  updatedAt: DateTime!
}

input UserCreateInput {
  IrregularDate: IrregularDateCreateNestedManyWithoutUserInput
  createdAt: DateTime
  dayOff: UserCreatedayOffInput
  durationPerDay: Int
  email: String!
  name: String!
  projects: ProjectCreateNestedManyWithoutUsersInput
  role: Role
  tasks: TaskCreateNestedManyWithoutUserInput
  updatedAt: DateTime
}

input UserCreateNestedManyWithoutProjectsInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutProjectsInput!]
  create: [UserCreateWithoutProjectsInput!]
}

input UserCreateNestedOneWithoutTasksInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutTasksInput
  create: UserCreateWithoutTasksInput
}

input UserCreateOrConnectWithoutProjectsInput {
  create: UserCreateWithoutProjectsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutTasksInput {
  create: UserCreateWithoutTasksInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutProjectsInput {
  IrregularDate: IrregularDateCreateNestedManyWithoutUserInput
  createdAt: DateTime
  dayOff: UserCreatedayOffInput
  durationPerDay: Int
  email: String!
  name: String!
  role: Role
  tasks: TaskCreateNestedManyWithoutUserInput
  updatedAt: DateTime
}

input UserCreateWithoutTasksInput {
  IrregularDate: IrregularDateCreateNestedManyWithoutUserInput
  createdAt: DateTime
  dayOff: UserCreatedayOffInput
  durationPerDay: Int
  email: String!
  name: String!
  projects: ProjectCreateNestedManyWithoutUsersInput
  role: Role
  updatedAt: DateTime
}

input UserCreatedayOffInput {
  set: [DayOfWeek!]
}

input UserListRelationFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

input UserOrderByInput {
  createdAt: SortOrder
  dayOff: SortOrder
  durationPerDay: SortOrder
  email: SortOrder
  id: SortOrder
  name: SortOrder
  role: SortOrder
  updatedAt: SortOrder
}

input UserScalarWhereInput {
  AND: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  createdAt: DateTimeFilter
  dayOff: EnumDayOfWeekNullableListFilter
  durationPerDay: IntFilter
  email: StringFilter
  id: IntFilter
  name: StringFilter
  role: EnumRoleFilter
  updatedAt: DateTimeFilter
}

input UserUpdateInput {
  IrregularDate: IrregularDateUpdateManyWithoutUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  dayOff: UserUpdatedayOffInput
  durationPerDay: IntFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  projects: ProjectUpdateManyWithoutUsersInput
  role: EnumRoleFieldUpdateOperationsInput
  tasks: TaskUpdateManyWithoutUserInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  dayOff: UserUpdatedayOffInput
  durationPerDay: IntFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateManyWithWhereWithoutProjectsInput {
  data: UserUpdateManyMutationInput!
  where: UserScalarWhereInput!
}

input UserUpdateManyWithoutProjectsInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutProjectsInput!]
  create: [UserCreateWithoutProjectsInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutProjectsInput!]
  updateMany: [UserUpdateManyWithWhereWithoutProjectsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutProjectsInput!]
}

input UserUpdateOneRequiredWithoutTasksInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutTasksInput
  create: UserCreateWithoutTasksInput
  update: UserUpdateWithoutTasksInput
  upsert: UserUpsertWithoutTasksInput
}

input UserUpdateWithWhereUniqueWithoutProjectsInput {
  data: UserUpdateWithoutProjectsInput!
  where: UserWhereUniqueInput!
}

input UserUpdateWithoutProjectsInput {
  IrregularDate: IrregularDateUpdateManyWithoutUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  dayOff: UserUpdatedayOffInput
  durationPerDay: IntFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  tasks: TaskUpdateManyWithoutUserInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateWithoutTasksInput {
  IrregularDate: IrregularDateUpdateManyWithoutUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  dayOff: UserUpdatedayOffInput
  durationPerDay: IntFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  projects: ProjectUpdateManyWithoutUsersInput
  role: EnumRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdatedayOffInput {
  push: DayOfWeek
  set: [DayOfWeek!]
}

input UserUpsertWithWhereUniqueWithoutProjectsInput {
  create: UserCreateWithoutProjectsInput!
  update: UserUpdateWithoutProjectsInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithoutTasksInput {
  create: UserCreateWithoutTasksInput!
  update: UserUpdateWithoutTasksInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  IrregularDate: IrregularDateListRelationFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  createdAt: DateTimeFilter
  dayOff: EnumDayOfWeekNullableListFilter
  durationPerDay: IntFilter
  email: StringFilter
  id: IntFilter
  name: StringFilter
  projects: ProjectListRelationFilter
  role: EnumRoleFilter
  tasks: TaskListRelationFilter
  updatedAt: DateTimeFilter
}

input UserWhereUniqueInput {
  email: String
  id: Int
  name: String
}
